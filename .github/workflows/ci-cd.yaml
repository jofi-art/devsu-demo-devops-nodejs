name: Test, build and deploy Node.js app to AKS

# This workflow is triggered on push to the main branch
on:
    push:
        branches:
            - main

# Environment variables for the workflow            
env:
    RESOURCE-GROUP: 'rg-devsu-jofiart'
    AKS_CLUSTER-NAME: 'aks-devsu-jofiart'
    location: 'eastus'
    ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

# Job definitions for the workflow 
jobs:
    # Unit tests, code coverage and static code analysis
    tests:
        runs-on: ubuntu-latest
        steps:
            # Checkout the code
            - name: Checkout code
              uses: actions/checkout@v4

            # Install dependencies
            - name: Install dependencies
              run: npm i

            # Run unit tests amd code coverage
            - name: Unit testing and code coverage
              run: |-
                npm i jest
                npm test
                npm run coverage
              continue-on-error: true

            # Run static code analysis
            - name: Static code analysis
              run: |-
                npm i eslint
                npx eslint . --ext .js,.jsx,.ts,.tsx
              continue-on-error: true
            
            # Adittional npm audit testing
            - name: NPM audit
              run: npm audit
              continue-on-error: true
    
    # Build the Docker image, run vulnerability scan and push to DockerHub          
    build-and-push:
        runs-on: ubuntu-latest
        needs: tests
        steps:
            # Checkout the code
            - name: Checkout code
              uses: actions/checkout@v4

            # Install dependencies
            - name: Install dependencies
              run: npm i

            # Build the Docker image
            - name: Build Docker image
              run: docker build -t jofiart/demo-devops-nodejs:latest .

            # Run a docker vulnerability scan to see critical and high vulnerabilities
            - name: Run Docker vulenability scan with Trivy
              uses: aquasecurity/trivy-action@master
              with:
                image-ref: jofiart/demo-devops-nodejs:latest
                format: sarif
                exit-code: 1
                severity: CRITICAL,HIGH
              continue-on-error: true

            # Login to DockerHub
            - name: Login to DockerHub
              uses: docker/login-action@v2
              with:
                username: ${{ secrets.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_PASSWORD }}

            # Push the Docker image to DockerHub
            - name: Push Docker image to DockerHub
              run: docker push jofiart/demo-devops-nodejs:latest

    # Deploy the infrastructure using Terraform          
    infra-deploy:
        runs-on: ubuntu-latest
        needs: build-and-push
        steps:
            # Checkout the code
            - name: Checkout code
              uses: actions/checkout@v4

            # Login to Azure
            - name: Login to Azure
              uses: azure/login@v1
              with:
                creds: ${{ secrets.AZURE_CREDENTIALS }}

            # Install Terraform
            - name: Install Terraform
              uses: hashicorp/setup-terraform@v2
              with:
                terraform_version: 1.5.7

            # Initialize Terraform
            - name: Terraform Init
              working-directory: ./terraform
              run: terraform init

            # Plan Terraform deployment and save the plan to a file
            - name: Terraform Plan
              working-directory: ./terraform
              run: terraform plan -out=tfplan

            # Apply Terraform deployment
            - name: Terraform Apply
              working-directory: ./terraform
              run: terraform apply -auto-approve

            # Save the Terraform state file
            - name: Save Terraform State
              working-directory: ./terraform
              run: tar -cvf terraform-state.tar .terraform terraform.tfstate
      
            # Upload the Terraform state file as an artifact  
            - name: Upload Terraform State
              uses: actions/upload-artifact@v4
              with:
                name: terraform-state
                path: ./terraform/terraform-state.tar  
 
    # Deploy the application to AKS using kubectl and the k8s manifests
    app-deploy:
        runs-on: ubuntu-latest
        needs: infra-deploy
        steps:
            # Checkout the code
            - name: Checkout code
              uses: actions/checkout@v4

            # Login to Azure
            - name: Login to Azure
              uses: azure/login@v1
              with:
                creds: ${{ secrets.AZURE_CREDENTIALS }}

            # Setup Azure CLI and Get AKS credentials
            - name: Setup Azure CLI and Get AKS credentials
              run: |-
                az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
                az aks get-credentials --resource-group ${{env.RESOURCE-GROUP}} --name ${{env.AKS_CLUSTER-NAME}}

            # Deploy the application to AKS using kubectl apply with the k8s manifests
            - name: Deploy configMap
              run: kubectl apply -f k8s/configmap.yaml

            - name: Deploy secret
              run: kubectl apply -f k8s/secret.yaml

            - name: Deploy deployment
              run: kubectl apply -f k8s/deployment.yaml

            - name: Deploy service
              run: kubectl apply -f k8s/service.yaml

            - name: Deploy HPA
              run: kubectl apply -f k8s/hpa.yaml

            - name: Deploy ingress
              run: kubectl apply -f k8s/ingress.yaml

            # Wait for the deployment to be ready
            - name: Wait for deployment to be ready
              run: kubectl rollout status deployment/demo-devops-nodejs

            # Verify the deployment
            - name: Verify deployment
              run: |-
                kubectl get pods
                kubectl get svc
                kubectl get ingress

    # Cleanup the infrastructure if the deployment fails
    cleanup-on-failure:
        needs: app-deploy
        if: failure()
        runs-on: ubuntu-latest
        steps:
            # Checkout the code
            - name: Checkout code
              uses: actions/checkout@v4

            # Login to Azure
            - name: Login to Azure
              uses: azure/login@v1
              with:
                creds: ${{ secrets.AZURE_CREDENTIALS }}

            # Install Terraform
            - name: Install Terraform
              uses: hashicorp/setup-terraform@v2
              with:
                terraform_version: 1.5.7

            # Download the Terraform state file artifact
            - name: Download Terraform state file
              uses: actions/download-artifact@v4
              with:
                name: terraform-state

            # Extract the Terraform state file
            - name: Extract Terraform state file
              run: |-
                tar -xvf terraform-state.tar
                mv terraform.tfstate terraform/

            # Initialize Terraform
            - name: Terraform Init
              working-directory: ./terraform
              run: terraform init

            # Destroy Terraform deployment
            - name: Terraform Destroy
              working-directory: ./terraform
              run: terraform destroy -auto-approve